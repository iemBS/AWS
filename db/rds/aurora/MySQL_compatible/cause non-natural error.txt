Cause Non-Natural Error
Note:
  -Range of SQLSTATE values that can be used by developers, not used by MySQL, and are allowed by MySQL
  -Full list of natural SQLSTATE and MySQL Error # @ https://dev.mysql.com/doc/mysql-errors/5.7/en/ix01.html
  -"HY000" SQLSTATE is the same thing as the "45000" SQLSTATE
Main Success Scenario:
  1. Throw customer unhandled error
    SIGNAL SQLSTATE '45000'
       SET MESSAGE_TEXT = 'my custom message',
           MYSQL_ERRNO = xxx:fill in
  2. End
Alternatives:
  1a. Use SQLSTATE value that is not used by MySQL, but allowed
    1a1. See code below
      SIGNAL SQLSTATE '45002'
    1a2. Returns the default MESSAGE_TEXT and MySQL Error #
      "Unhandled user-defined exception condition"
      1644
    1a3. Go to Step 2
  1b. Use a SQLSTATE value that is not used by MySQL (but allowed) and use a MySQL Error # that is used by MySQL
    1b1. SIGNAL SQLSTATE '45001' SET MYSQL_ERRNO = 2060;
    1b2. Returns the default MESSAGE_TEXT for SQLSTATE 45000 and MySQL Error #
      "Unhandled user-defined exception condition"
      2060
  1c. Throw an error with a known SQLSTATE and MySQL Error # combination that requires input from the query
    1c1. SIGNAL SQLSTATE 'HY000' SET MYSQL_ERRNO = 1233;
    1c2. Returns a MESSAGE_TEXT and MySQL Error # of
      "Unhandled user-defined exception condition"
      1233
  1d. Use MYSQL_ERRNO value that is not used by MySQL, but allowed
    1d1. xxx:fill in
  1e. Do a change that causes a natural error to occur
    1e1. "Cause Natural Error using Non-Natural Means"
    

Cause Natural Error using Non-Natural Means
Note:
  -Guidance @ 
    -https://dev.mysql.com/doc/mysql-errors/5.7/en/server-error-reference.html
Main Success Scenario:
  1. "Get an exclusive write table lock with user A and try to write to table with user B"
Alternatives:
  1a. "Provide Invalid Value to Procedure Parameter"
  1b. "User A runs query and User B kills query"
  1c. "Provide Incorrect number of Parameters to Procedure"
  1d. "Provide More Parameters to Procedure than Expected"
  1e. 
  
Get an exclusive write table lock with user A and try to write to table with user B
Main Success Scenario:
  1. Get credentials for an admin or non-admin login and refer to it as User A
  2. Get credentials for an admin or non-admin login and refer to it as User B
  3. User A: Runs below query, where MyTbl is a table accessible by both users
    LOCK TABLES MyTbl WRITE;
  4. User B: Runs Select Count(1) From MyTbl
  5. User A: Runs the below query to see "Waiting for table metadata lock" in STATE column for User B's query
    Select * From Information_Schema.ProcessList Where COMMAND <> 'Sleep'
  6. User B: Stops select query
  7. User B: Runs SET @@Session.lock_wait_timeout = 20
  8. User B: Runs below query and watches it run for 20 seconds 
    LOCK TABLES MyTbl WRITE;
  9. User B: Sees error thrown with MySQL Error code of "1205" and message text of "Lock wait timeout exceeded; try restarting transaction"
  

  
  
Provide Invalid Value to Procedure Parameter
Main Success Scenario:
  1. xxx:fill in
 
 
Provide Fewer Parameters to Procedure than Expected
Main Success Scenario:
  1. Provide fewer parameters to procedure than expected
  2. Run procedure call
  3. See error with "1318" MySQL Error code and the below message text where X is the number of expected params and Y is the number provided
    Incorrect number of arguments for PROCEDURE [procedure name]; expected X, got Y
    
    
Provide More Parameters to Procedure than Expected
Main Success Scenario:
  1. Provide more parameters to procedure than expected
  2. Run procedure call
  3. See error with "1318" MySQL Error code and the below message text where X is the number of expected params and Y is the number provided
    Incorrect number of arguments for PROCEDURE [procedure name]; expected X, got Y
  
  
User A runs query and User B kills query
Note:
  -This error will show in the MySQL Error log and not the log you are writing errors to that are generated from your custom SQL code. 
  -Guidance @ 
    -https://dev.mysql.com/doc/refman/5.7/en/error-lost-connection.html
Main Success Scenario:
  1. Get credentials for an admin login and refer to it as User A
  2. Get credentials for a non-admin login and refer to it as User B
  3. User B: Start running a query that takes at least 1 minute to run 
  4. User A: Runs the following query to get the Process ID of User B's query
    Select * From Information_Schema.ProcessList Where COMMAND <> 'Sleep'
  5. User A: Runs the following query to kill User B's query, where "[ID]" is the process ID retrieved from the previous User A query
    Kill [ID]
  6. User A: Sees successful execution message for the KILL query
  7. User B: Sees an error with a message of "Lost connection to MySQL server during query" and MySQL Code of "2013"
