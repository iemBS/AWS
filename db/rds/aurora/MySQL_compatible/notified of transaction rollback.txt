Notified of Transaction Rollback
Note:
  -You must call SIGNAL after ROLLBACK if you want an exception to be generated and rollback the transaction. 
    -See @ https://stackoverflow.com/questions/60894895/mysql-transaction-in-stored-procedure-does-not-rollback
  -Guidance @ 
    -https://dev.mysql.com/doc/refman/5.7/en/signal.html
    -https://dev.mysql.com/doc/refman/5.7/en/diagnostics-area.html
  -SIGNAL statement must use a 5 character string literal for the SQLSTATE
  -Condition 1 in the Diagnostics area is the most recent condition (error, warning, or note).
    -So, if we are looking at the Diagnostics Area within a handler, then it is the error
Main Success Scenario:
  1. See code below 
  
    DECLARE exit handler for sqlexception
    BEGIN
        -- ERROR
      ROLLBACK;
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'SQLError occured. Triggered ROLLBACK';
    END;
Alternatives:
  1a. Rollback and then show error that occurred in the procedure as string message in SQL client
    1a1. See code below
        CREATE DEFINER=`MyAccount`@`%` PROCEDURE `MyProcedure`()
        BEGIN    
          DECLARE EXIT HANDLER FOR SQLEXCEPTION
          BEGIN 
            GET DIAGNOSTICS CONDITION 1 
              @sqlstate = RETURNED_SQLSTATE, # Get SQLSTATE of error thrown by procedure
              @errno = MYSQL_ERRNO, # Get MySQL Error # of error thrown by procedure
                    @text = MESSAGE_TEXT; # Get Message of error thrown by procedure 
                SET @full_error = CONCAT('Transaction rollback occurred due to ERROR (MySQL Error #:', @errno, ', SQLSTATE: ', @sqlstate, ', Message: "', @text,'")');
            ROLLBACK; # Should return MyColumn to a value of 0. 
                SELECT @full_error;
          END;

          Update MyTable Set MyColumn = 0;

          START TRANSACTION;
            SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;

            Update MyTable Set MyColumn = 1;

          SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 1;
          SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 2;   

          COMMIT;  
        END
        
  1b. Rollback and then show general error to indicate an error occurred in the procedure 
    1a1. See code below
        CREATE DEFINER=`MyAccount`@`%` PROCEDURE `MyProcedure`()
        BEGIN    
          DECLARE EXIT HANDLER FOR SQLEXCEPTION
          BEGIN 
            ROLLBACK; # Should return MyColumn to a value of 0. 
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'SQLError occured. Triggered ROLLBACK';
          END;

          Update MyTable Set MyColumn = 0;

          START TRANSACTION;
            SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;

            Update MyTable Set MyColumn = 1;

          SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 1;
          SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 2;   

          COMMIT;  
        END
  1c. Collect error info, rollback, then show error that occurred in the procedure 
    1c1. See code below
        CREATE DEFINER=`MyAccount`@`%` PROCEDURE `MyProcedure`()
        BEGIN    
          DECLARE EXIT HANDLER FOR SQLEXCEPTION
          BEGIN 
            GET DIAGNOSTICS CONDITION 1 
              @sqlstate = RETURNED_SQLSTATE, # Get SQLSTATE of error thrown by procedure
              @errno = MYSQL_ERRNO, # Get MySQL Error # of error thrown by procedure
                    @text = MESSAGE_TEXT; # Get Message of error thrown by procedure 
                SET @full_error = CONCAT('Transaction rollback occurred due to ERROR (MySQL Error #:', @errno, ', SQLSTATE: ', @sqlstate, ', Message: "', @text,'")');
            ROLLBACK; # Should return MyColumn to a value of 0. 
                SIGNAL SQLSTATE '45000' 
              SET MESSAGE_TEXT = @full_error, 
                        MYSQL_ERRNO = @errno;
          END;

          Update MyTable Set MyColumn = 0;

          START TRANSACTION;
            SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;

            Update MyTable Set MyColumn = 1;

          SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 1,
                    mysql_errno = 1649;
          SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 2,
                    mysql_errno = 1649;

        END
  1d. Collect error info based on part of query it is from, rollback, then show error that occurred in the procedure 
    1c1. See code below
      CREATE DEFINER=`MyAccount`@`%` PROCEDURE `MyProcedure`()
      BEGIN    
        # Declare variables to hold diagnostics area info
        DECLARE varSQLSTATE CHAR(5) DEFAULT '00000';
        DECLARE varMESSAGE_TEXT TEXT;
          DECLARE varMYSQL_ERRNO INT;
          DECLARE varQueryPart TEXT;

          # Declare Error handler
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN 
              # Get error info
          GET DIAGNOSTICS CONDITION 1 
            varSQLSTATE = RETURNED_SQLSTATE, # Get SQLSTATE of error thrown by procedure
            varMYSQL_ERRNO = MYSQL_ERRNO, # Get MySQL Error # of error thrown by procedure
                  varMESSAGE_TEXT = MESSAGE_TEXT; # Get Message of error thrown by procedure 
          IF varQueryPart = 'INSERT' THEN                                                   
            SET varMESSAGE_TEXT = CONCAT_WS('|','Transaction rollback','MyProcedure',varQueryPart,varSQLSTATE,varMESSAGE_TEXT);
              ELSE 
            SET varMESSAGE_TEXT = CONCAT_WS('|','Transaction rollback','MyProcedure',varQueryPart,varSQLSTATE,varMESSAGE_TEXT);
              END IF;
          ROLLBACK; # Should return MyTable table to state before changes occurred in the section that the error occurred in
              SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = varMESSAGE_TEXT,
                      MYSQL_ERRNO = varMYSQL_ERRNO;
        END;

        START TRANSACTION;
          SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;

          SET varQueryPart = 'INSERT'; 

        # Insert that works
        DELETE FROM MyTable;
        Insert Into
          MyTable
          (
            ColOne
          )
        Select 0;

          /*
        # Insert that will cause error
        Insert Into
          MyTable
          (
            ColTWo
          )
        Select 3;
        */

          SET varQueryPart = 'UPDATE';

          # Update that works
          /*
          Update MyTable Set ColOne = 1;
          */

          # Update that will cause error
          Update MyTable Set ColTwo = 1;

        COMMIT;
      END
