Analyze Table Index Need
Main Success Scenario:
  x. Queries with table are slow
  x. "See if column falls into scenario where indexes can help"
  x. "See if table/sub-query with fewest rows in left position of a table join"
  x. "See if column value order makese a difference"
  x. "See column relationships"
  x. "See if column makes index unique and avoids use of disitinct"
  x.xxx:fill in

See if column falls into scenario where indexes can help
Note: 
  -Guidance @ https://www.tutorialspoint.com/how-to-speed-up-select-distinct-in-mysql
  -Guidance @ https://dev.mysql.com/doc/refman/5.7/en/mysql-indexes.html
Main Success Scenario:
  1. "Filter column"
  2. Join on column
  3. Group on column
  4. Distinct on column
  5. Partition on column
  6. Use only column in index
  7. Order on column
  8. "Use aggregation function on column"
  9. "Like column"
  10. "Replace conditional join with temp table"
  11. Has two or more values in column
  12. "Replace conditional update value with temp table"
  
  
Use aggregation function on column
Note:
  -Guidance @ https://dev.mysql.com/doc/refman/5.7/en/aggregate-functions.html
Main Success Scenario:
  1. Use Min function
  2. Use Max function

Like colum
Main Success Scenario:
  1. The values in two different columns do not need to be converted to be compared
  
Replace conditional join with temp table
Main Success Scenario:
  1. xxx:fill in
  
  
Filter column
Note: 
  -What about NOT IN operator?
Main Success Scenario:
  1. ColNm = Val
  2. ColNm Between Val1 and Val2
  3. ColNm In (Val1, Val2, Val3)
  4. xxx:fill in
  
Replace conditional update value with temp table
Pre-Conditions: 
  -Only applies to update query
Note:
  -Guidance @ https://stackoverflow.com/questions/31844963/mysql-use-of-index-in-case-when-syntax
Main Success Scenario:
  1.xxx:fill in
  
See if column value order makese a difference
Main Success Scenario:
  1.xxx:fill in

See column relationships
Note: 
  -Just ordering the columns by the distinct distinct count of values where the smallest count is on the left and the largest count on the right, may not be good enough. It does not follow the phone book analogy. 
Main Success Scenario:
  1. Is the column that is in position 2 or greater in the index, have values that have only a single parent varlue that is in the column to the left (a value hierarchy where there can only be one parent)
  2. Is the column that is in position 2 or greater in the index, have values that have more than one parent varlue that is in the column to the left (a value hierarchy where there can be many parents)
  3. Does the column that is in position 2 or greater in the index need to have its values found after the column to the left does (priority of hierarchy levels)
  4. What is the average count of values for a column that is in position N+1 in an index for each value that is in column N in the index
  
See if column makes index unique and avoids use of disitinct
Main Success Scenario:
  1. If column added to make index unique but is not used in a way defined in the "See if column falls into scenario where indexes can help" use case, then put in column position at end of index.
