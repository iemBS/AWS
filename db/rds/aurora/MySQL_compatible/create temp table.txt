Create Temp Table
Note:
  -Guidance @ https://www.mysqltutorial.org/mysql-temporary-table/
  -A temporary table is created by using CREATE TEMPORARY TABLE statement. Notice that the keyword TEMPORARY is added between the CREATE and TABLE keywords.
  -MySQL removes the temporary table automatically when the session ends or the connection is terminated. Of course, you can use the  DROP TABLE statement to remove a temporary table explicitly when you are no longer use it.
  -A temporary table is only available and accessible to the client that creates it. Different clients can create temporary tables with the same name without causing errors because only the client that creates the temporary table can see it. However, in the same session, two temporary tables cannot share the same name.
  -A temporary table can have the same name as a normal table in a database. For example, if you create a temporary table named employees in the sample database, the existing employees table becomes inaccessible. Every query you issue against the employees table is now referring to the temporary table employees. When you drop the employees temporary table, the permanent employees table is available and accessible.
  -No need to have a db prefix on the table name because it cannot be stored in a db of your choice.
  -Temp table stored in memory or disk. See guidance @ https://dev.mysql.com/doc/refman/5.6/en/internal-temporary-tables.html
  
Main Success Scenario:
  1. See query below
  
      CREATE TEMPORARY TABLE credits(
          customerNumber INT PRIMARY KEY,
          creditLimit DEC(10,2)
      );
Alternatives:
  1a. Create and fill temp table in one query
    1a1. "Create Temp Table On-the-Fly"
  1b. Create Temp Table in Procedure
    1b1. Drop Temp table if it exists
    1b2. Create Temp Table
  1c. Create Temp Table with database name prefix. 
    1c1. 
      CREATE TEMPORARY TABLE IF NOT EXISTS MyDbNm.MyTmpTbl
        Select 1 As col;
    1c2. Run select statement to see that DB prefix is part of the name of the table and not limited to the database that was noted. 
       Select * From MyDbNm.MyTmpTbl
  1d. Internal temp table created by MySQL
    1d1. "Create Internal Temp Table"
       
       

Create Temp Table On-the-Fly
Note:
  -Like creating a temp table using SELECT INTO within SQL Server
Main Success Scenario:
  1. See query below
  
      CREATE TEMPORARY TABLE top_customers
      SELECT p.customerNumber, 
             c.customerName, 
             ROUND(SUM(p.amount),2) sales
      FROM payments p
      INNER JOIN customers c ON c.customerNumber = p.customerNumber
      GROUP BY p.customerNumber
      ORDER BY sales DESC
      LIMIT 10;

Create Internal Temp Table
Pre-Conditions:
  -Internal Temp Tables only created by MySQL. 
  -Internal Temp Tables use the "MEMORY" storage engine. Noted @ https://dev.mysql.com/doc/refman/5.7/en/internal-temporary-tables.html#:~:text=An%20internal%20temporary%20table%20can,to%20an%20on%2Ddisk%20table.
Note: 
  -Guidance @ 
    -https://dev.mysql.com/doc/refman/5.7/en/internal-temporary-tables.html
  -Internal temp tables created by MySQL for 
    -sorting an index
    -evaluation of UNION statements
    -Evaluation of some views, such those that use the TEMPTABLE algorithm, UNION, or aggregation.
    -Evaluation of derived tables
    -Tables created for subquery or semijoin materialization
    -Evaluation of statements that contain an ORDER BY clause and a different GROUP BY clause, or for which the ORDER BY or GROUP BY contains columns from tables other than the first table in the join queue.
    -Evaluation of DISTINCT combined with ORDER BY may require a temporary table.
    -For queries that use the SQL_SMALL_RESULT modifier, MySQL uses an in-memory temporary table, unless the query also contains elements (described later) that require on-disk storage.
    -To evaluate INSERT ... SELECT statements that select from and insert into the same table, MySQL creates an internal temporary table to hold the rows from the SELECT, then inserts those rows into the target table.
    -Evaluation of multiple-table UPDATE statements.
    -Evaluation of GROUP_CONCAT() or COUNT(DISTINCT) expressions.
  -query conditions that prevent the use of an internal temp table
    -xxx:fill in
  -query conditions that qualify a UNION for evaluation without an internal temp table
    -xxx:fill in
Main Success Scenario:
  1. xxx:fill in
