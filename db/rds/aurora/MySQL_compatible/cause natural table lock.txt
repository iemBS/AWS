Cause Natural Table Lock
Note:
  -When InnoDB performs a complete rollback of a transaction, all locks set by the transaction are released. If a single SQL statement within a transaction rolls back as a result of an error, such as a duplicate key error, locks set by the statement are preserved while the transaction remains active. This happens because InnoDB stores row locks in a format such that it cannot know afterward which lock was set by which statement. Noted @ https://dev.mysql.com/doc/refman/5.7/en/commit.html
  -Guidance @ 
    -https://www.oreilly.com/library/view/mysql-reference-manual/0596002653/ch06s07.html
    -https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html
    -https://dev.mysql.com/doc/refman/5.7/en/locking-issues.html
    -https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_row_lock
    -https://dev.mysql.com/doc/refman/5.7/en/internal-locking.html
    -https://dev.mysql.com/doc/refman/5.7/en/innodb-information-schema-transactions.html
  -InnoDB tables use row-level locking so that multiple sessions and applications can read from and write to the same table simultaneously, without making each other wait or producing inconsistent results. For this storage engine, avoid using the LOCK TABLES statement, because it does not offer any extra protection, but instead reduces concurrency. The automatic row-level locking makes these tables suitable for your busiest databases with your most important data, while also simplifying application logic since you do not need to lock and unlock tables. 
  -MySQL uses table locking (instead of page, row, or column locking) for all storage engines except InnoDB. The locking operations themselves do not have much overhead. But because only one session can write to a table at any one time, for best performance with these other storage engines, use them primarily for tables that are queried often and rarely inserted into or updated.
  -External locking is only used by the MyISAM storage engine. Noted @ https://dev.mysql.com/doc/refman/5.7/en/external-locking.html
  -Table level locking is not used for the InnoDB storage engine. Noted @ https://dev.mysql.com/doc/refman/5.7/en/internal-locking.html
Main Success Scenario:
  1. xxx:fill in
Alternatives:
  1a. Lock table for writing
    1a1. xxx:fill in
  1b. Lock table for deleting
    1b1. xxx:fill in
  1c. "Lock only specific rows in a table" 
  1d. "Lock only specific index record gap in a table"
  1e. "Lock only specific index records in a table"
  1f. "Lock specific index records and index record gap in a table"
  1g. "Lock table with AUT-INC lock"
    

Lock only specific index record gap in a table
Note:
  -Guidance @ 
    -https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-gap-locks
    -https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-insert-intention-locks
    -
Main Success Scenario:
  1. Lock only specific gap in a table for reading
  2. xxx:fill in
Alternatives;
  1a. Lock only specific gap in a table for writing
    1a1. xxx:fill in
  1b. Lock only specific gap in a table for updating
    1b1. xxx:fill in
  1c. Lock only specific gap in a table for deleting
    1c1. xxx:fill in
  1d. Lock only specific index record gap in a table for insert (Insert Intention Lock)
    1d1. see code below
        CREATE TABLE child (id int(11) NOT NULL, PRIMARY KEY(id)) ENGINE=InnoDB;
        START TRANSACTION;
        SELECT * FROM child WHERE id > 100 FOR UPDATE;
        INSERT INTO child (id) VALUES (101);
    1d2. Go to Step 2.
    
Lock only specific index records in a table
Note:
  -Guidance @ 
    -https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-record-locks
Main Success Scenario:
  1. xxx:fill in


Lock specific index records and index record gap in a table
Note:
  -Guidance @ 
    -https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-next-key-locks
Main Success Scenario:
  1. xxx:fill in
  
  
Lock table with AUT-INC lock
Note:
  -Guidance @
    -https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-auto-inc-locks
Main Success Scenario:
  1. xxx:fill in
