Create Table Index
Note:
  -Guidance @ https://dev.mysql.com/doc/refman/5.6/en/innodb-index-types.html
  -Guidance @ https://dev.mysql.com/doc/refman/5.6/en/create-index.html
  -Guidance @ https://dev.mysql.com/doc/refman/5.6/en/multiple-column-indexes.html
  -Guidance @ https://www.oreilly.com/library/view/mysql-reference-manual/0596002653/ch05s02.html
  -When you specify a primary key an index is automatically created. Guidance @ https://dev.mysql.com/doc/refman/5.6/en/primary-key-optimization.html
  -For a multi-column index, put the column with the fewest value first. 
    -Guidance @ https://stackoverflow.com/questions/24315151/does-order-of-fields-of-multi-column-index-in-mysql-matter
    -Guidance @ https://dev.mysql.com/doc/refman/5.7/en/multiple-column-indexes.html
  -A primary key and a unique index with the non-null constraint are basically the same
  -Having a number after a string column noted in an index indicates the first N characters will be used in the index. 
    -Specifying N for indexes can make the index file much smaller, which could save a lot of disk space and might also speed up INSERT operations.
  -When you create a UNIQUE constraint, MySQL creates a UNIQUE index behind the scenes. Guidance @ https://www.mysqltutorial.org/mysql-unique
  -A PRIMARY KEY constraint creates a UNIQUE index. 
  -A unique index can contain multiple null values. See https://dev.mysql.com/doc/refman/5.7/en/create-index.html
    -"InnoDB Storage Engine Index Characteristics" table in URL above notes that unique and non-unique indexes can have more than one NULL value
  -You can have only one PRIMARY KEY constraint per table. 
  -Unique Key and Primary Key differences
    -Unique Key allows one NULL value
    -Primary key has a clustered index and unique key does not have a clustered index
  -Clustered indexes are stored physically on the table. This means they are the fastest and you can only have one clustered index per table. Non-clustered indexes are stored separately, and you can have as many as you want.
  -While executing a SELECT statement is faster on a clustered index than a non-clustered index, but INSERTs, UPDATEs, and DELETEs on that clustered index require more time. The extra time is needed because you are also updating the index during those operations. Rows are being sorted in the table to keep the clustered index up to date.
    -Guidance @ https://stackoverflow.com/questions/91688/what-are-the-differences-between-a-clustered-and-a-non-clustered-index
    -Guidance @ https://www.sqlshack.com/poor-database-indexing-sql-query-performance-killer-recommendations/
    -The index quality can go down if there are enough inserts, updates, and deletions in a table. 
    -If you are going to insert data into a table and create an index on it in two steps that are right next to each other, insert into the table first and then create the index next. 
    -If you access a table mostly by searching on a combination of columns, create a single composite index on them rather than a separate index for each column. 
    -The first part of the index should be the column most used. 
    -If you always use many columns when selecting from the table, the first column in the index should be the one with the most duplicates, to obtain better compression of the index.
    -If it is very likely that a long string column has a unique prefix on the first number of characters, it is better to index only this prefix, using MySQL's support for creating an index on the leftmost part of the column. Shorter indexes are faster, not only because they require less disk space, but because they also give you more hits in the index cache, and thus fewer disk seeks.
    -Use Partial Index @ https://www.oreilly.com/library/view/high-performance-mysql/0596003064/ch04.html
Main Success Scenario:
  1. CREATE INDEX idx_[tableName]_[column names] ON MyTbl (MyCol1,MyCol2);
Alternatives:
  1a. Create Unique Index
    1a1. CREATE UNIQUE INDEX idx_[tableName]_[column names] ON MyTbl (MyCol1,MyCol2);
  1b. Create Clustered Index
    1b1. xxx:fill in
  1c. Create Multi-Column Index
    1c1. xxx:fill in
  1d. Alternative command format that is also treated as a table alter
    1d1. ALTER TABLE ADD INDEX idx_[tableName]_[column names] ON MyTbl (MyCol1,MyCol2);
  1e. Create index only if it does not already exist (by name)
    1e1. See code below 
    
    Set @x := (Select Count(*) from Information_Schema.Statistics Where Table_Schema = 'MyDB' And Table_Name = 'MyTbl' and Index_Name = 'MyIndex');
    Set @sql := if(@x > 0, 'select ''Index already exists.''', 'Create Index MyIndex On MyTbl(Col1,Col2,Col3);');
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
  1f. Create index only if it does not already exist (by index definition)
    1f1. See code below
      xxx:fill in
    
  
