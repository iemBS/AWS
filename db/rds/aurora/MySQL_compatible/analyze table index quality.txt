Analyze Table Index Quality
Note: 
  -Guidance @ https://dev.mysql.com/doc/refman/5.6/en/analyze-table.html
  -ANALYZE TABLE clears table statistics from the INFORMATION_SCHEMA.INNODB_SYS_TABLESTATS table and sets the STATS_INITIALIZED column to Uninitialized. Statistics are collected again the next time the table is accessed. This may be why some people are seeing improvements just by running "ANALYZE TABLE". They are not using old stats for the index. The 1st run afer running that statement may be slow, but the times after that may be faster than before running the statement. 
  -How much bigger in MB can the index get than a table and still be seen as ok by the "ANALYZE TABLE" statement?
  -Guidance @ https://dev.mysql.com/doc/refman/5.6/en/information-schema-statistics-table.html
  -Guidance @ https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html
  -# of rows examined in an index in the EXPLAIN results is an estimate.
  -Guidance @ https://dev.mysql.com/doc/refman/5.7/en/explain-output.html
Main Success Scenario:
  1. ANALYZE TABLE MyTbl;
  2. See message of index quality 
  3. Run the below query to see the index MB size compared to the table MB size.
  
      Select
        *,
        Round(indexSizeInMB / tableSizeInMB,2) * 100 As indexPctOfTableSizeInMB
      From
        (
          SELECT 
             table_name, 
             table_rows As tableSizeInRows,
             round(((data_length) / 1024 / 1024), 2) As tableSizeInMB,
             round(((index_length) / 1024 / 1024),2) As indexSizeInMB,
             Version,
             Engine,
             Row_Format
          FROM 
            information_schema.TABLES 
          Where
            Table_Type = 'BASE TABLE'
            And
            index_length > 0
        ) t
      ORDER BY 
        indexPctOfTableSizeInMB DESC;
       
  4. "See if column falls into scenario where indexes can help"
  5. "See how well columns in an index relate to each other"
  
  
  
  See how well columns in an index relate to each other
  Note: 
    -This makes use of the phone book analogy for an index
    -Guidance for Avg function @ https://www.mysqltutorial.org/mysql-avg/
    -Flipping the columns in any of the queries below would ideally give you an average of 1. If it does not, then a smaller value would confirm that you chose the right parent to child relationship (aka ordering of those two columns). 
  Main Success Scenario:
    1. See query below

        Select
          Avg(Cnt), # Avg count of values for Column 2 for each Column 1 value
            Min(Cnt),
            Max(Cnt)
        From
          (
            Select
              MyCol1InIndex,
              Count(Distinct MyCol2InIndex) As Cnt
            From
              MyTbl
            Group By
              MyCol1InIndex
            Order By
              Cnt Desc
          ) t;

        Select
          Avg(Cnt), # Avg count of values for Column 3 for each Column 2 value
            Min(Cnt),
            Max(Cnt)
        From
          (
            Select
              MyCol2InIndex,
              Count(Distinct MyCol3InIndex) As Cnt
            From
              MyTbl
            Group By
              MyCol2InIndex
            Order By
              Cnt Desc
          ) t;

        Select
          Avg(Cnt), # Avg count of values for Column 4 for each Column 3 value
            Min(Cnt),
            Max(Cnt)
        From
          (
            Select
              MyCol3InIndex,
              Count(Distinct right(replace(MyCol4InIndex,'-',''),6)) As Cnt
            From
              MyTbl
            Group By
              MyCol3InIndex
            Order By
              Cnt Desc
          ) t;
  
