Use Signal
Note:
  -Guidance @ https://dev.mysql.com/doc/refman/5.7/en/signal.html
    -Class = '00' (success)
    -Class = '01' (warning)
    -Class = '02' (not found)
    -Class > '02' (exception)
  -The first two characters of an SQLSTATE value are its class, and the class determines the default value for the condition information items
  -Warnings do not terminate a procedure
  -All SQLSTATE classes and possible values @ https://en.wikipedia.org/wiki/SQLSTATE
  -https://www.mysqltutorial.org/mysql-signal-resignal/
  -The RESIGNAL  statement is similar to SIGNAL  statement in term of functionality and syntax, except that:
    -You must use the RESIGNAL  statement within an error or warning handler, otherwise, you will get an error message saying that “RESIGNAL when the handler is not active”. Notice that you can use SIGNAL  statement anywhere inside a stored procedure.
    -You can omit all attributes of the RESIGNAL statement, even the SQLSTATE value.
    -If you use the RESIGNAL statement alone, all attributes are the same as the ones passed to the condition handler.
    -MYSQL_ERRNO is a MySQL extension
    -Value for MYSQL_ERRNO does not need to align with the SQLSTATE. It will cause confusion for anyone looking at it.
    -Use "SHOW WARNINGS" to see warnings generated with a SIGNAL statement
      -MESSAGE_TEXT value will show in "Message" column of results
      -MYSQL_ERRNO value will show in "Code" column of results
    -Use "SHOW ERRORS" to see errors generated with a SIGNAL statement
      -MESSAGE_TEXT value will show in "Message" column of results
      -MYSQL_ERRNO value will show in "Code" column of results
      -map MySQL error # to SQLSTATE to SQLSTATE keyword @ https://docs.oracle.com/cd/E19078-01/mysql/mysql-refman-5.0/error-handling.html
        -More than one MySQL error # can be mapped to a single SQLSTATE
    -defaults for MYSQL_ERRNO and MESSAGE_TEXT defined @ https://mariadb.com/kb/en/diagnostics-area/
    -default MYSQL_ERRNO value for each class within SQLSTATE
      -For '01' class: 1642
      -For '02' class: 1643
      -For > '02' class: 1644
    -default MESSAGE_TEXT value for each class within SQLSTATE
      -For '01' class: Unhandled user-defined warning condition
      -For '02' class: Unhandled user-defined not found condition
      -For > '02' class: Unhandled user-defined exception condition
    -Calling SIGNAL will clear the previous errors, warnings, and notes from the Diagnostic Area. 
      -Noted @ https://mariadb.com/kb/en/diagnostics-area/
Main Success Scenario:
  1. SIGNAL SQLSTATE '01000';
  2. SHOW WARNINGS
  3. SHOW WARNINGS returns Level, Code, & Message columns
  4. End
Alternatives:
  1a. Signal an unhandled user-defined exception
    1a1. SIGNAL SQLSTATE '45000';
    1a2. SHOW ERRORS
    1a3. SHOW ERRORS returns Level, Code, & Message columns
      'Error', '1644', 'Unhandled user-defined exception condition'
    1a4. 
  1b. Signal successful completion
    1b1. The SQLSTATE is "00000", but you cannot make a SIGNAL call with that 
    1b2. End
  1c. Signal custom error with spaces that is derived from "45000" SQLSTATE
    1c1. 
      DECLARE My_Custom_Error CONDITION FOR SQLSTATE '45000';
      SIGNAL My_Custom_Error
     1c2. SHOW ERRORS
     1c3. SHOW ERRORS returns Level, Code, & Message columns
       'Error', '1319', 'Undefined CONDITION: My_Custom_Error'
     1c4. End
  1d. Signal custom error with spaces that is derived from "45000" SQLSTATE
    1d1. See code below 
      DECLARE `My Custom Error` CONDITION FOR SQLSTATE '45000';
      SIGNAL `My Custom Error`
    1d2. SHOW ERRORS
    1d3. SHOW ERRORS returns Level, Code, & Message columns
      'Error', '1319', 'Undefined CONDITION: My_Custom_Error'
    1d4. END
  1e. Set MESSAGE_TEXT in SIGNAL statement
    1e1. See code below 
      SIGNAL SQLSTATE '01000'
        SET MESSAGE_TEXT = 'A warning occurred';
    1e2. SHOW WARNINGS 
    1e3. SHOW WARNINGS returns Level, Code, & Message columns
      'Warning', '1642', 'A warning occurred'
    1e4. END
  1f. Set MYSQL_ERRNO in SIGNAL statement
    1f1. See code below
      SIGNAL SQLSTATE '01000'
        SET MYSQL_ERRNO = 1000;
    1f2. SHOW WARNINGS
    1f3. SHOW WARNINGS returns Level, Code, & Message columns
      'Warning', '1000', 'Unhandled user-defined warning condition'
    1f4. END
  1g. Set MYSQL_ERRNO and MESSAGE_TEXT in SIGNAL statement
    1g1. See code below
      SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'An error occurred', MYSQL_ERRNO = 3000;
    1g2. SHOW ERRORS
    1g3. SHOW ERRORS returns Level, Code, & Message columns
      'Error', '3000', 'An error occurred'
    1g4. END 
  1h. Use invalid SQLSTATE that has a class > '02' and is not in https://en.wikipedia.org/wiki/SQLSTATE
    1h1. SIGNAL SQLSTATE '47000'
    1h2. SHOW ERRORS
    1h3. SHOW ERRORS returns Level, Code, & Message columns
      'Error', '1644', 'Unhandled user-defined exception condition'
    1h4. END
  1i. Use invalid SQLSTATE that has a class of '01' and is not in https://en.wikipedia.org/wiki/SQLSTATE
    1i1. SIGNAL SQLSTATE '01999'
    1i2. SHOW WARNINGS
    1i3. SHOW WARNINGS returns Level, Code, & Message columns
      'Warning', '1642', 'Unhandled user-defined warning condition'
    1i4. END
  1j. See the results of only the last error SIGNAL statement (default behavior)
    1j1. See code below
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 1;
        SIGNAL SQLSTATE '45000'
          SET MESSAGE_TEXT = 2;     
    1j2. SHOW ERRORS
    1j3. SHOW ERRORS returns Level, Code, & Message columns
      'Error', '1644', '2'
    1j4. END 
  1k. See the results of only the last warning SIGNAL statement (default behavior)
    1k1. See code below
      SIGNAL SQLSTATE '01000'
        SET MESSAGE_TEXT = 1;
      SIGNAL SQLSTATE '01000'
        SET MESSAGE_TEXT = 2;     
    1k2. SHOW WARNINGS
    1k3. SHOW WARNINGS returns Level, Code, & Message columns
      'Warning', '1642', '2'
    1k4. END
  1l. 
    1l1. Create procedure that returns no value but has more than one SIGNAL generated warning
      CREATE DEFINER=`MyAcct`@`%` PROCEDURE `MyProcedure`()
      BEGIN
        SIGNAL SQLSTATE '01000'
          SET MESSAGE_TEXT = 1;
        SIGNAL SQLSTATE '01000'
          SET MESSAGE_TEXT = 2;   
      END
    1l2. CALL MyProcedure();
    1l3. SHOW WARNINGS
    1l4. SHOW WARNINGS returns Level, Code, & Message columns
      'Warning', '1642', '2'
    1l5. END
  1z. Use Resignal instead of Signal
    1z. xxx:fill in
