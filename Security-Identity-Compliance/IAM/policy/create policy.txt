Create Policy
Note:
  -guidance @
     -https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html
     -https://docs.aws.amazon.com/cli/v1/userguide/cli-usage-parameters-quoting-strings.html
  -type
    -managed 
      -by customer
        -Custom ones created by me
      -by aws
        -Canned ones createdd by AWS
    -inline
  -managed type pros
    -reusability: A single managed policy can be attached to multiple principal entities (users, groups, and roles). In effect, you can create a library of policies that define permissions that are useful for your AWS account, and then attach these policies to principal entities as needed.
      -Depends on the range of principals, resources, or both that the policy can apply to. 
      -May reduce the total number of inline and managed policies
      -May make less secure
    -central change management: When you change a managed policy, the change is applied to all principal entities that the policy is attached to. For example, if you want to add permission for a new AWS API, you can update the managed policy to add the permission. (If you're using an AWS managed policy, AWS updates to the policy.) When the policy is updated, the changes are applied to all principal entities that the policy is attached to. 
    -versioning and rolling back: When you change a customer managed policy, the changed policy doesn't overwrite the existing policy. Instead, IAM creates a new version of the managed policy. IAM stores up to five versions of your customer managed policies. You can use policy versions to revert a policy to an earlier version if you need to.
    -delegating permissions management: You can allow users in your AWS account to attach and detach policies while maintaining control over the permissions defined in those policies. In effect, you can designate some users as full administratorsâ€”that is, administrators that can create, update, and delete policies. You can then designate other users as limited administrators. That is, administrators that can attach policies to other principal entities, but only the policies that you have allowed them to attach.
    -automatic updates for AWS managed policies: AWS maintains AWS managed policies and updates them when necessary (for example, to add permissions for new AWS services), without you having to make changes. The updates are automatically applied to the principal entities that you have attached the AWS managed policy to.
  -managed type cons
    -xxx
  -inline type pros
    -Inline policies are useful if you want to maintain a strict one-to-one relationship between a policy and the identity to which it is applied. 
    -Ensures that the permissions in a policy are not inadvertently assigned to an identity other than the one they're intended for
    -When you use an inline policy, the permissions in the policy cannot be inadvertently attached to the wrong identity. 
    -When you use the AWS Management Console to delete that identity, the policies embedded in the identity are deleted as well. That's because they are part of the principal entity.
  -inline type cons
    -central change management: to change an inline policy you must individually edit each identity that contains the policy. For example, if a group and a role both contain the same inline policy, you must individually edit both principal entities in order to change that policy.
Main Success Scenario:
  1. Use AWS Managed Policy
  2. End
Alternatives:
  1a. Created custom managed policy
    1a1. "Create Custom Managed Policy"
    1a2. Go to step 2
  1b. Create Inline Policy
    1b1. "Create Inline Policy"
    
    
Create Inline Policy
Main Success Scenario:
  1. xxx:fill in


Create Custom Managed Policy
Note:
  -guidance @
    -https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.IAM.LambdaCreatePolicy.html
Main Success Scenario:
  1. Create policy JSON

    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "UNQIUE_POLICY_NAME",
                "Effect": "Allow",
                "Action": "SERVICE:ACTION",
                "Resource": "RESOURCE_ARN"
            }
        ]
    }
    
  2. Associate policy with a role
  3. End
Alternatives:
  2a. Associate policy with a service 
    2a1. xxx:fill in 
    2a2. go to step 3

  
Create Policy for Glue
Note:
  -guidance @ 
    -https://docs.aws.amazon.com/glue/latest/dg/create-service-policy.html
Main Success Scenario:
  1. xxx:fill in
